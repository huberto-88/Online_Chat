type: edu
files:
- name: src/chat/client/Client.java
  visible: true
  text: |-
    package chat.client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;
    import java.util.Scanner;

    public class Client {

        private static final String SERVER_ADDRESS = "127.0.0.1";
        private static final int SERVER_PORT = 34520;

        private static DataInputStream input;
        private static DataOutputStream output;
        private static Socket socket;

        public static void main(String[] args) {

            try {
                socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
                input = new DataInputStream(socket.getInputStream());
                output = new DataOutputStream(socket.getOutputStream());
                System.out.println("Client started!");

                Sender sender = new Sender();
                Receiver receiver = new Receiver();
                sender.start();
                receiver.start();
                receiver.join();
                receiver.isDaemon();

            } catch (IOException | InterruptedException ioe) {
                ioe.printStackTrace();
            }
        }

        static class Receiver extends Thread {

            @Override
            public void run() {
                while (!isInterrupted()) {
                    String recivedMsg;
                    try {
                        recivedMsg = input.readUTF();
                        System.out.println(recivedMsg);

                    } catch (IOException e) {
                        interrupt();
                    }
                }
            }
        }

        static class Sender extends Thread {
            Scanner scanner = new Scanner(System.in);
            String msg = "";

            @Override
            public void run() {
                while (!msg.equals("/exit") && !isInterrupted()) {
                    try {
                        msg = scanner.nextLine();
                        output.writeUTF(msg);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
  learner_created: false
- name: src/chat/server/Server.java
  visible: true
  text: |-
    package chat.server;

    import java.io.*;
    import java.net.*;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    public class Server {

        private static final int PORT = 34520;

        protected int numberOfThread = 1;
        protected List<String> listOfClients;
        protected List<String> listOfMessages;
        protected Map<String, DataOutputStream> outputMap;

        protected  DataInputStream input;
        protected  DataOutputStream output;
        protected Socket socket;

        public Server() {
            listOfClients = new ArrayList<>();
            listOfMessages = new ArrayList<>();
            outputMap = new HashMap<>();
        }

        public static void main(String[] args) {

            Server server = new Server();
            server.start();
        }

        public void start() {

            try (ServerSocket server = new ServerSocket(PORT)) {
                System.out.println("Server started!");
                       server.setSoTimeout(7000);
                while (true) {
                    socket = server.accept();
                    input = new DataInputStream(socket.getInputStream());
                    output = new DataOutputStream(socket.getOutputStream());

                    Thread counter = new Counter(input, output);
                    counter.setName("" + numberOfThread++);
                    counter.start();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        class Counter extends Thread {
            private String msg;
            private String name;
            private DataInputStream input;
            private DataOutputStream output;

            public Counter(DataInputStream input, DataOutputStream output) {
                this.input = input;
                this.output = output;
            }

            @Override
            public void run() {
    //            System.out.println("Client " + Thread.currentThread().getName() + " connected!");

                try {
                    output.writeUTF("Server: write your name");
                    name = input.readUTF();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }

                while (!isInterrupted()){
                    if (listOfClients.contains(name)) {
                        try {
                            output.writeUTF("Server: this name is already taken! Choose another one.");
                            name = input.readUTF();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    } else {
                        listOfClients.add(name);
                        outputMap.put(name, output);
                        Thread.currentThread().setName(name);
                        int quantityMessageToPrint = listOfMessages.size() >= 10 ? 10 : listOfMessages.size();
                        int index = listOfMessages.size() - quantityMessageToPrint;

                        for (int i = 0; i < quantityMessageToPrint; i++) {
                            try {
                                output.writeUTF(listOfMessages.get(index));
                                index++;
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }

                        break;
                    }
                }
                while (!isInterrupted()) {
                    try {
                        msg = input.readUTF();

                        if (msg.equals("/exit")) {
                            outputMap.remove(Thread.currentThread().getName());
                        } else {
                            listOfMessages.add(Thread.currentThread().getName() + ": "+ msg);
                            for (DataOutputStream o : outputMap.values()) {
                                o.writeUTF(Thread.currentThread().getName() + ": " + msg);
                            }
                        }
                    } catch (IOException e) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() {
            final TestedProgram server = new TestedProgram("chat.server");
            final TestedProgram client1 = new TestedProgram("chat.client");
            final TestedProgram client2 = new TestedProgram("chat.client");
            final TestedProgram client3 = new TestedProgram("chat.client");
            client1.setReturnOutputAfterExecution(false);
            client2.setReturnOutputAfterExecution(false);
            client3.setReturnOutputAfterExecution(false);
            final int executePause = 50;

            server.startInBackground();
            sleep(executePause);
            client1.start();
            sleep(executePause);
            client2.start();
            sleep(executePause);
            client3.start();
            sleep(executePause);
            client3.getOutput();
            client2.getOutput();

            final String client1Start = client1.getOutput().trim();
            if (!"Client started!\nServer: write your name".equals(client1Start.trim())) {
                return CheckResult.wrong("Can't get the \"Client started!\nServer: write your name\" messages");
            }

            client1.execute("First");
            sleep(executePause);

            final String client1Answer1 = client1.getOutput().trim();
            if (!client1Answer1.isEmpty()) {
                return CheckResult.wrong("Client receive a message after successful login, but shouldn't");
            }

            client1.execute("Hello all!");
            sleep(executePause);

            final String client1Answer2 = client1.getOutput().trim();
            if (client1Answer2.isEmpty() || !client1Answer2.equals("First: Hello all!")) {
                return CheckResult.wrong("Client receive wrong message");
            }


            final String client2Answer1 = client2.getOutput().trim();
            if (client2Answer1.trim().equals("First: Hello all!")) {
                return CheckResult.wrong("Client printed a message from chat before login yet!");
            }

            if (!client2Answer1.isEmpty()) {
                return CheckResult.wrong("Client printed a message before login but shouldn't");
            }

            client2.execute("Second");
            sleep(executePause);

            final String client2Answer2 = client2.getOutput().trim();
            if (!client2Answer2.equals("First: Hello all!")) {
                return CheckResult.wrong("Client should receive and print last 10 messages after login");
            }

            client3.execute("First");
            sleep(executePause);

            final String client3Answer1 = client3.getOutput().trim();
            if (client3Answer1.isEmpty() ||
                    !client3Answer1.trim().equals("Server: this name is already taken! Choose another one.")) {
                return CheckResult.wrong(
                        "Can't get the \"Server: this name is already taken! Choose another one.\" " +
                                "message after login with name that is already taken");
            }

            client3.execute("Second");
            sleep(executePause);

            final String client3Answer2 = client3.getOutput().trim();
            if (client3Answer2.isEmpty() ||
                    !client3Answer2.trim().equals("Server: this name is already taken! Choose another one.")) {
                return CheckResult.wrong(
                        "Can't get the \"Server: this name is already taken! Choose another one.\" " +
                                "message after login with name that is already taken");
            }


            client2.execute("Bye bye!");
            sleep(executePause);

            final String client1Answer3 = client1.getOutput().trim();
            final String client2Answer3 = client2.getOutput().trim();

            if (client1Answer3.isEmpty() || client2Answer3.isEmpty())
                return CheckResult.wrong("Client didn't receive a message");

            if (!client1Answer3.equals("Second: Bye bye!")
                    || !client2Answer3.equals("Second: Bye bye!")) {
                return CheckResult.wrong("Client receive a wrong message");
            }

            client2.execute("First message");
            sleep(executePause);
            client2.execute("Second message");
            sleep(executePause);
            client2.execute("Third message");
            sleep(executePause);
            client2.execute("Fourth message");
            sleep(executePause);
            client2.execute("Fifth message");
            sleep(executePause);
            client2.execute("Sixth message");
            sleep(executePause);
            client2.execute("Seventh message");
            sleep(executePause);
            client2.execute("Eighth message");
            sleep(executePause);
            client2.execute("Ninth message");
            sleep(executePause);
            client2.execute("Tenth message");
            sleep(executePause);
            client2.execute("/exit");
            sleep(executePause);

            if (!client2.isFinished()) {
                return CheckResult.wrong("Client's program should shut down after /exit command");
            }

            client3.execute("Third");
            sleep(executePause);

            final String client3Answer3 = client3.getOutput().trim();
            if (!client3Answer3.equals(
                    "Second: First message\n" +
                    "Second: Second message\n" +
                    "Second: Third message\n" +
                    "Second: Fourth message\n" +
                    "Second: Fifth message\n" +
                    "Second: Sixth message\n" +
                    "Second: Seventh message\n" +
                    "Second: Eighth message\n" +
                    "Second: Ninth message\n" +
                    "Second: Tenth message")) {
                return CheckResult.wrong("Client should receive and print 10 last messages after login");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/49/stages/268/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 13 Nov 2021 11:38:13 UTC
record: 3
